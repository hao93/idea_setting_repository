<application>
  <component name="AppStorage">
    <histories>
      <item value="Returns the absolute value of a {@ code double } value ." />
      <item value="Returns a {@ code Big Decimal } whose value is {@ code ( this / divisor )}, and whose scale is as specified . If rounding must be performed to generate a result with the specified scale , the specified rounding mode is applied ." />
      <item value="divide" />
      <item value="Returns the index within this string of the first occurrence of the specified substring ." />
      <item value="negative Zero Double Bits" />
      <item value="Returns the greater of two {@ code double } values ." />
      <item value="VARCHAR" />
      <item value="get Event By Thirdid" />
      <item value="need Custom Interval" />
      <item value="&lt; p &gt; See the description of the class &lt; code &gt; Date &lt;/ code &gt; for a discussion of slight discrepancies that may arise between &quot; computer time &quot; and coordinated universal time ( UTC )." />
      <item value="Returns the current time in milliseconds . Note that while the unit of time of the return value is a millisecond , the granularity of the value depends on the underlying operating system and may be larger . For example , many operating systems measure time in units of tens of milliseconds ." />
      <item value="the current value of the running Java Virtual Machine ' s high - resolution time source , in nanoseconds" />
      <item value="Returns the current value of the running Java Virtual Machine ' s high - resolution time source , in nanoseconds . &lt; p &gt; This method can only be used to measure elapsed time and is not related to any other notion of system or wall - clock time . The value returned represents nanoseconds since some fixed but arbitrary &lt; i &gt; origin &lt;/ i &gt; time ( perhaps in the future , so values may be negative ). The same origin is used by all invocations of this method in an instance of a Java virtual machine ; other virtual machine instances are likely to use a different origin . &lt; p &gt; This method provides nanosecond precision , but not necessarily nanosecond resolution ( that is , how frequently the value changes ) - no guarantees are made except that the resolution is at least as good as that of {@ link # current Time Millis ()}. &lt; p &gt; Differences in successive calls that span greater than approximately 292 years (2&lt; sup &gt;63&lt;/ sup &gt; nanoseconds ) will not correctly compute elapsed time due to numerical overflow . &lt; p &gt; The values returned by this method become meaningful only when the difference between two such values , obtained within the same instance of a Java virtual machine , is computed . &lt; p &gt; For example , to measure how long some code takes to execute : &lt; pre &gt; {@ code long start Time = System . nano Time (); // ... the code being measured ... long estimated Time = System . nano Time () - start Time ;}&lt;/ pre &gt; &lt; p &gt; To compare two nano Time values &lt; pre &gt; {@ code long t 0 = System . nano Time (); ... long t 1 = System . nano Time ();}&lt;/ pre &gt; one should use {@ code t 1 - t 0 &lt; 0}, not {@ code t 1 &lt; t 0}, because of the possibility of numerical overflow ." />
      <item value="This method can only be used to measure elapsed time and is not related to any other notion of system or wall - clock time . The value returned represents nanoseconds since some fixed but arbitrary &lt; i &gt; origin &lt;/ i &gt; time ( perhaps in the future , so values may be negative ). The same origin is used by all invocations of this method in an instance of a Java virtual machine ; other virtual machine instances are likely to use a different origin ." />
      <item value="Returns the current value of the running Java Virtual Machine ' s high - resolution time source , in nanoseconds ." />
      <item value="recommend" />
      <item value="number of key - value pairs in the B - tree" />
      <item value="recursive" />
      <item value="Duplicated" />
      <item value="Swaps the elements at the specified positions in the specified list ." />
      <item value="After all of the queries have run , we get the results in the order given and add dump the results in an array" />
      <item value="confirm cancle" />
      <item value="Also , if a String passes the numeric test , it may still generate a Number Format Exception when parsed by Integer . parse Int or Long . parse Long , e . g . if the value is outside the range for int or long respectively .&lt;/ p &gt;" />
      <item value="Note that the method does not allow for a leading sign , either positive or negative ." />
      <item value="An empty Char Sequence ( length ()=0) will return {@ code false }." />
      <item value="A decimal point is not a Unicode digit and returns false ." />
      <item value="Checks if the Char Sequence contains only Unicode digits ." />
      <item value="sensitive" />
      <item value="Regular linear interpolation" />
      <item value="is Infinite" />
      <item value="privilege" />
      <item value="Execute query by the given sql with parameters . The result will be wrapped into type defined by the given mapper ." />
      <item value="the current thread ' s value of this thread - local" />
      <item value="Returns the value in the current thread ' s copy of this thread - local variable . If the variable has no value for the current thread , it is first initialized to the value returned by an invocation of the {@ link # initial Value } method ." />
      <item value="Assertion" />
      <item value="All possible chars for representing a number as a String" />
      <item value="representing" />
      <item value="vendor" />
      <item value="artifact Id" />
      <item value="Average" />
      <item value="predict Tag Map" />
      <item value="set Attribute" />
      <item value="The load factor used when none specified in constructor ." />
      <item value="Monopoly" />
      <item value="get Monopoly Detail List" />
      <item value="Trace Data" />
      <item value="Trace" />
      <item value="save Recommend Trace Data" />
      <item value="get Recommend Image" />
      <item value="Recommend" />
    </histories>
  </component>
</application>